# -*- coding: utf-8 -*-
"""auto_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15BnKEIIDkLs9xiujPQZWyasbe7uofHA5
"""

import os
import cv2
import numpy as np
import pandas as pd
#import matplotlib.pyplot as plt
'''
try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
#import tensorflow as tf
'''
import tensorflow as tf

'''
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D, Activation, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array
from keras.utils.np_utils import to_categorical  
'''
#from tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions

# This function will plot images in the form of a grid with 1 row and 5 columns where images are placed in each column.

# load model
new_model = tf.keras.models.load_model('saved_model/model_vers0_1')

# Check its architecture
new_model.summary()

# preprocessing
PATH = 'Raw_datasets/10'
labels = np.array(['HEALTHY','SPOILED'])

images = []
tests = []
#plt.figure(figsize=(60,90))
#plt.subplots_adjust(right = 0.3, top = 0.99, wspace = 0.1, hspace=0.3)
for i in range(105):
  #true_label_ids = np.argmax(test_label, axis=-1)
  #for image in test_image:
  name = PATH + '/10_' + str(i+1) + '.png'
  image = cv2.imread(name)
  '''
  if i < 36:
    plt.subplot(36,6,i+1)
    plt.imshow(image)
    plt.title(str(i+1))
    plt.axis('off')
  '''
  image = cv2.resize(image,(128,128))
  images.append(image)
  image = image.astype('float32')
  image /= 255.0
  tests.append(image)

tests = np.array(tests)
#print(tests.shape)
#tests[0]

# test model
tf_model_predictions = new_model.predict(tests, steps=1, verbose=1)

predicted_ids = np.argmax(tf_model_predictions, axis=-1)
predicted_labels = labels[predicted_ids]
#plt.figure(figsize=(60,100))
#plt.subplots_adjust(right = 0.3, top = 0.99, wspace = 0.1, hspace=0.3)
n = 0
classes = []
for image in images:
  #print(image.shape)
  #break
  n += 1
  classes.append(predicted_ids[n - 1])
  '''
  if n <= 36:
      plt.subplot(36,6,n)
      plt.imshow(image)
      plt.title(predicted_labels[n-1].title())
      plt.axis('off')
      classes.append(predicted_ids[n-1])
  '''

classes = np.array(classes)
classes = classes.reshape(6,6)
#classes.shape

# save
np.savetxt('Raw_datasets/15_04_2020.csv', classes, delimiter=',')